basePath: /
definitions:
  models.APIError:
    description: APIError represents an API error response
    properties:
      code:
        type: string
      details:
        type: string
      field:
        type: string
      message:
        type: string
    required:
    - code
    - message
    type: object
  models.AnswerCookingQuestionRequest:
    description: AnswerCookingQuestionRequest represents a request to answer a cooking
      question
    properties:
      question:
        type: string
    required:
    - question
    type: object
  models.AnswerCookingQuestionResponse:
    description: AnswerCookingQuestionResponse represents a response to an answer
      cooking question
    properties:
      answer:
        type: string
    required:
    - answer
    type: object
  models.ChatMessage:
    description: ChatMessage represents a message in the chat history
    properties:
      message:
        type: string
      source:
        type: string
    required:
    - message
    - source
    type: object
  models.GetNewSuggestionsRequest:
    description: GetNewSuggestionsRequest represents a request to get new suggestions
    properties:
      prompt:
        type: string
    type: object
  models.Ingredient:
    description: Ingredient represents an ingredient in a recipe
    properties:
      name:
        example: Flour
        type: string
      quantity:
        example: 1
        type: number
      unit:
        allOf:
        - $ref: '#/definitions/models.MeasurementUnit'
        example: cup
    required:
    - name
    - quantity
    - unit
    type: object
  models.LoginRequest:
    description: LoginRequest represents the user login request payload
    properties:
      email:
        description: User's email address
        example: john.doe@example.com
        type: string
      password:
        description: User's password
        example: Password123!
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    description: LoginResponse represents the user login response
    properties:
      token:
        description: Access token for user
        example: <JWT_TOKEN>
        type: string
    required:
    - token
    type: object
  models.MeasurementUnit:
    enum:
    - g
    - ml
    - tsp
    - tbsp
    - cup
    - oz
    - lb
    type: string
    x-enum-varnames:
    - MeasurementUnitGram
    - MeasurementUnitMilliliter
    - MeasurementUnitTeaspoon
    - MeasurementUnitTablespoon
    - MeasurementUnitCup
    - MeasurementUnitOunce
    - MeasurementUnitPound
  models.ModifyChatResponse:
    description: ModifyChatResponse represents a chat response to the ML backend to
      modify a recipe
    properties:
      error:
        type: string
      new_recipe:
        $ref: '#/definitions/models.RecipeBody'
      response_text:
        type: string
    required:
    - error
    - new_recipe
    - response_text
    type: object
  models.ModifyRecipeViaChatRequest:
    description: ModifyRecipeViaChatRequest represents a request to modify a recipe
      via chat
    properties:
      prompt:
        type: string
    required:
    - prompt
    type: object
  models.Profile:
    description: Profile represents a user's profile information
    properties:
      allergies:
        description: User's allergies
        items:
          type: string
        type: array
      cuisines:
        description: User's cuisines
        items:
          type: string
        type: array
      diets:
        description: User's diet restrictions
        items:
          type: string
        type: array
      equipment:
        description: User's equipment
        items:
          type: string
        type: array
      name:
        description: User's name
        type: string
      setup_step:
        allOf:
        - $ref: '#/definitions/models.SetupStep'
        description: Setup Step
      skill:
        allOf:
        - $ref: '#/definitions/models.Skill'
        description: User's skill level
    required:
    - allergies
    - cuisines
    - diets
    - equipment
    - name
    - setup_step
    - skill
    type: object
  models.ProfileUpdateRequest:
    description: ProfileUpdateRequest represents a user's profile update request payload
    properties:
      allergies:
        description: User's allergies
        items:
          type: string
        type: array
      cuisines:
        description: User's cuisines
        items:
          type: string
        type: array
      diets:
        description: User's diet restrictions
        items:
          type: string
        type: array
      equipment:
        description: User's equipment
        items:
          type: string
        type: array
      name:
        description: User's name
        type: string
      setup_step:
        allOf:
        - $ref: '#/definitions/models.SetupStep'
        description: Setup Step
      skill:
        allOf:
        - $ref: '#/definitions/models.Skill'
        description: User's skill level
    type: object
  models.RecipeBody:
    description: RecipeBody represents the contents of a recipe
    properties:
      description:
        example: A classic Italian dish
        type: string
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      servings:
        example: 4
        type: integer
      steps:
        items:
          type: string
        type: array
      title:
        example: Veal Bolognese
        type: string
      total_time_minutes:
        example: 120
        type: integer
    required:
    - description
    - ingredients
    - servings
    - steps
    - title
    - total_time_minutes
    type: object
  models.RecipeSuggestion:
    description: RecipeSuggestion represents a suggestion for a recipe
    properties:
      accepted:
        type: boolean
      created_at:
        type: string
      id:
        type: string
      rejected:
        type: boolean
      response_text:
        type: string
      suggestion:
        $ref: '#/definitions/models.RecipeBody'
      thread_id:
        type: string
      updated_at:
        type: string
    required:
    - accepted
    - created_at
    - id
    - rejected
    - response_text
    - suggestion
    - thread_id
    - updated_at
    type: object
  models.SetupStep:
    enum:
    - profile
    - skill
    - cuisines
    - diet
    - equipment
    - allergies
    - done
    type: string
    x-enum-varnames:
    - SetupStepProfile
    - SetupStepSkill
    - SetupStepCuisines
    - SetupStepDiet
    - SetupStepEquipment
    - SetupStepAllergies
    - SetupStepDone
  models.SignupRequest:
    description: SignupRequest represents the user signup request payload
    properties:
      email:
        description: User's email address
        example: john.doe@example.com
        type: string
      password:
        description: User's password
        example: Password123!
        type: string
    required:
    - email
    - password
    type: object
  models.SignupResponse:
    description: SignupResponse represents the user signup response
    properties:
      token:
        description: Access token for user
        example: <JWT_TOKEN>
        type: string
    required:
    - token
    type: object
  models.Skill:
    enum:
    - beginner
    - intermediate
    - advanced
    - chef
    type: string
    x-enum-varnames:
    - SkillBeginner
    - SkillIntermediate
    - SkillAdvanced
    - SkillChef
  models.StartSuggestionThreadRequest:
    description: StartSuggestionThreadRequest represents a request to start a suggestion
      thread
    properties:
      prompt:
        type: string
    required:
    - prompt
    type: object
  models.ThreadState:
    description: A thread of suggestions for a recipe
    properties:
      chat_history:
        items:
          $ref: '#/definitions/models.ChatMessage'
        type: array
      created_at:
        type: string
      current_prompt:
        type: string
      current_recipe:
        $ref: '#/definitions/models.RecipeBody'
      id:
        type: string
      original_prompt:
        type: string
      recipe_id:
        type: string
      suggestions:
        items:
          $ref: '#/definitions/models.RecipeSuggestion'
        type: array
      updated_at:
        type: string
    required:
    - chat_history
    - created_at
    - current_prompt
    - id
    - original_prompt
    - suggestions
    - updated_at
    type: object
  models.UserRecipe:
    description: UserRecipe is the user's personal copy (favorites, edits).
    properties:
      created_at:
        type: string
      description:
        example: A classic Italian dish
        type: string
      global_recipe_id:
        type: string
      id:
        type: string
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      is_favorite:
        type: boolean
      latest_version_id:
        type: string
      servings:
        example: 4
        type: integer
      steps:
        items:
          type: string
        type: array
      thread_id:
        type: string
      title:
        example: Veal Bolognese
        type: string
      total_time_minutes:
        example: 120
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - created_at
    - description
    - id
    - ingredients
    - is_favorite
    - latest_version_id
    - servings
    - steps
    - thread_id
    - title
    - total_time_minutes
    - updated_at
    - user_id
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for the EatMe recipe generation service
  title: EatMe API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Log in to an existing user account
      operationId: login
      parameters:
      - description: User login information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Log in
      tags:
      - users
  /profile:
    get:
      description: Gets the profile for a user
      operationId: getProfile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Save a user's profile
      operationId: saveProfile
      parameters:
      - description: User profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.ProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Save user profile
      tags:
      - users
  /recipes:
    get:
      consumes:
      - application/json
      description: Get all recipes for user
      operationId: getAllRecipes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserRecipe'
            type: array
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get all recipes for user
      tags:
      - Recipe
  /recipes/{recipeId}:
    delete:
      consumes:
      - application/json
      description: Delete recipe
      operationId: deleteRecipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRecipe'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Recipe not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete recipe
      tags:
      - Recipe
    get:
      consumes:
      - application/json
      description: Get recipe by ID
      operationId: getRecipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRecipe'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Recipe not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get recipe by ID
      tags:
      - Recipe
  /recipes/{recipeId}/modify/chat:
    post:
      consumes:
      - application/json
      description: Modify a recipe via chat
      operationId: modifyRecipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeId
        required: true
        type: string
      - description: Modify recipe via chat request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ModifyRecipeViaChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModifyChatResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Thread not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Modify a recipe via chat
      tags:
      - thread
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user account
      operationId: signup
      parameters:
      - description: User signup information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SignupResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create a new user account
      tags:
      - users
  /thread/{threadId}:
    get:
      consumes:
      - application/json
      description: Get a thread
      operationId: getThread
      parameters:
      - description: Thread ID
        in: path
        name: threadId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ThreadState'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Thread not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get a thread
      tags:
      - thread
  /thread/{threadId}/accept/{suggestionId}:
    post:
      consumes:
      - application/json
      description: Accept a suggestion
      operationId: acceptSuggestion
      parameters:
      - description: Thread ID
        in: path
        name: threadId
        required: true
        type: string
      - description: Suggestion ID
        in: path
        name: suggestionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRecipe'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Thread not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Accept a suggestion
      tags:
      - thread
  /thread/{threadId}/question:
    post:
      consumes:
      - application/json
      description: Answer a cooking question
      operationId: answerCookingQuestion
      parameters:
      - description: Thread ID
        in: path
        name: threadId
        required: true
        type: string
      - description: Answer cooking question request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AnswerCookingQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AnswerCookingQuestionResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Answer a cooking question
      tags:
      - thread
  /thread/{threadId}/suggest:
    post:
      consumes:
      - application/json
      description: Get new recipe suggestions
      operationId: getNewSuggestions
      parameters:
      - description: Thread ID
        in: path
        name: threadId
        required: true
        type: string
      - description: Get new suggestions request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GetNewSuggestionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RecipeSuggestion'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Thread not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get new suggestions
      tags:
      - thread
  /thread/suggest:
    post:
      consumes:
      - application/json
      description: Start a new suggestion thread
      operationId: startSuggestionThread
      parameters:
      - description: Suggestion thread request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.StartSuggestionThreadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ThreadState'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Start a new suggestion thread
      tags:
      - thread
swagger: "2.0"
