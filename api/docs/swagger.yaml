basePath: /
definitions:
  models.Allergy:
    enum:
    - dairy
    - eggs
    - fish
    - gluten
    - peanuts
    - soy
    - tree_nuts
    - wheat
    type: string
    x-enum-varnames:
    - AllergyDairy
    - AllergyEggs
    - AllergyFish
    - AllergyGluten
    - AllergyPeanuts
    - AllergySoy
    - AllergyTreeNuts
    - AllergyWheat
  models.BadRequestResponse:
    description: Bad request error response
    properties:
      error:
        description: Error message
        example: Invalid input
        type: string
    required:
    - error
    type: object
  models.Cuisine:
    enum:
    - american
    - british
    - chinese
    - french
    - german
    - indian
    - italian
    - japanese
    - mexican
    - spanish
    - thai
    - vietnamese
    type: string
    x-enum-varnames:
    - CuisineAmerican
    - CuisineBritish
    - CuisineChinese
    - CuisineFrench
    - CuisineGerman
    - CuisineIndian
    - CuisineItalian
    - CuisineJapanese
    - CuisineMexican
    - CuisineSpanish
    - CuisineThai
    - CuisineVietnamese
  models.Diet:
    enum:
    - vegetarian
    - vegan
    - keto
    - paleo
    - low_carb
    - high_protein
    type: string
    x-enum-varnames:
    - DietVegetarian
    - DietVegan
    - DietKeto
    - DietPaleo
    - DietLowCarb
    - DietHighProtein
  models.Equipment:
    enum:
    - stove
    - oven
    - microwave
    - toaster
    - grill
    - smoker
    - slow_cooker
    - pressure_cooker
    - sous_vide
    type: string
    x-enum-varnames:
    - EquipmentStove
    - EquipmentOven
    - EquipmentMicrowave
    - EquipmentToaster
    - EquipmentGrill
    - EquipmentSmoker
    - EquipmentSlowCooker
    - EquipmentPressureCooker
    - EquipmentSousVide
  models.GeneralChatRequest:
    description: A chat request to the ML backend to answer a question
    properties:
      message:
        type: string
    required:
    - message
    type: object
  models.GeneralChatResponse:
    description: A chat response to the ML backend to answer a question
    properties:
      response_text:
        type: string
    required:
    - response_text
    type: object
  models.Ingredient:
    properties:
      name:
        example: Flour
        type: string
      quantity:
        example: 1
        type: number
      unit:
        allOf:
        - $ref: '#/definitions/models.MeasurementUnit'
        example: cup
    required:
    - name
    - quantity
    - unit
    type: object
  models.InternalServerErrorResponse:
    description: Internal server error response
    properties:
      error:
        description: Error message
        example: Internal server error
        type: string
    required:
    - error
    type: object
  models.MeasurementUnit:
    enum:
    - g
    - ml
    - tsp
    - tbsp
    - cup
    - oz
    - lb
    type: string
    x-enum-varnames:
    - MeasurementUnitGram
    - MeasurementUnitMilliliter
    - MeasurementUnitTeaspoon
    - MeasurementUnitTablespoon
    - MeasurementUnitCup
    - MeasurementUnitOunce
    - MeasurementUnitPound
  models.ModifyChatRequest:
    description: A chat request to the ML backend to modify a recipe
    properties:
      message:
        type: string
    required:
    - message
    type: object
  models.ModifyChatResponse:
    description: A chat response to the ML backend to modify a recipe
    properties:
      needs_clarification:
        type: boolean
      new_recipe:
        $ref: '#/definitions/models.RecipeBody'
      response_text:
        type: string
    required:
    - needs_clarification
    - new_recipe
    - response_text
    type: object
  models.Profile:
    description: User profile information
    properties:
      allergies:
        description: User's allergies
        items:
          $ref: '#/definitions/models.Allergy'
        type: array
      cuisines:
        description: User's cuisines
        items:
          $ref: '#/definitions/models.Cuisine'
        type: array
      diet:
        description: User's diet restrictions
        items:
          $ref: '#/definitions/models.Diet'
        type: array
      equipment:
        description: User's equipment
        items:
          $ref: '#/definitions/models.Equipment'
        type: array
      name:
        description: User's name
        type: string
      setup_step:
        allOf:
        - $ref: '#/definitions/models.SetupStep'
        description: Setup Step
      skill:
        allOf:
        - $ref: '#/definitions/models.Skill'
        description: User's skill level
    required:
    - allergies
    - cuisines
    - diet
    - equipment
    - name
    - setup_step
    - skill
    type: object
  models.ProfileUpdateRequest:
    description: User profile update request
    properties:
      allergies:
        description: User's allergies
        items:
          $ref: '#/definitions/models.Allergy'
        type: array
      cuisines:
        description: User's cuisines
        items:
          $ref: '#/definitions/models.Cuisine'
        type: array
      diet:
        description: User's diet restrictions
        items:
          $ref: '#/definitions/models.Diet'
        type: array
      equipment:
        description: User's equipment
        items:
          $ref: '#/definitions/models.Equipment'
        type: array
      name:
        description: User's name
        type: string
      setup_step:
        allOf:
        - $ref: '#/definitions/models.SetupStep'
        description: Setup Step
      skill:
        allOf:
        - $ref: '#/definitions/models.Skill'
        description: User's skill level
    required:
    - setup_step
    type: object
  models.RecipeBody:
    description: Contents of a recipe
    properties:
      description:
        example: A classic Italian dish
        type: string
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      servings:
        example: 4
        type: integer
      steps:
        items:
          type: string
        type: array
      title:
        example: Veal Bolognese
        type: string
      total_time_minutes:
        example: 120
        type: integer
    required:
    - description
    - ingredients
    - servings
    - steps
    - title
    - total_time_minutes
    type: object
  models.RecipeSuggestion:
    description: A suggestion for a recipe
    properties:
      accepted:
        type: boolean
      created_at:
        type: string
      id:
        type: string
      response_text:
        type: string
      suggestion:
        $ref: '#/definitions/models.RecipeBody'
      thread_id:
        type: string
      updated_at:
        type: string
    required:
    - accepted
    - created_at
    - id
    - response_text
    - suggestion
    - thread_id
    - updated_at
    type: object
  models.SetupStep:
    enum:
    - profile
    - skill
    - cuisines
    - diet
    - equipment
    - allergies
    - done
    type: string
    x-enum-varnames:
    - SetupStepProfile
    - SetupStepSkill
    - SetupStepCuisines
    - SetupStepDiet
    - SetupStepEquipment
    - SetupStepAllergies
    - SetupStepDone
  models.SignupRequest:
    description: User signup request
    properties:
      email:
        description: User's email address
        example: john.doe@example.com
        type: string
      password:
        description: User's password
        example: Password123!
        type: string
    required:
    - email
    - password
    type: object
  models.SignupResponse:
    description: User signup response containing the new user's ID
    properties:
      token:
        description: Access token for user
        example: <JWT_TOKEN>
        type: string
    required:
    - token
    type: object
  models.Skill:
    enum:
    - beginner
    - intermediate
    - advanced
    - chef
    type: string
    x-enum-varnames:
    - SkillBeginner
    - SkillIntermediate
    - SkillAdvanced
    - SkillChef
  models.SuggestChatRequest:
    description: A chat request to the ML backend to suggest a recipe
    properties:
      message:
        type: string
    required:
    - message
    type: object
  models.SuggestChatResponse:
    description: A chat response to the ML backend to suggest a recipe
    properties:
      new_recipe:
        $ref: '#/definitions/models.RecipeBody'
      response_text:
        type: string
      thread_id:
        type: string
    required:
    - new_recipe
    - response_text
    - thread_id
    type: object
  models.SuggestionThread:
    description: A thread of suggestions for a recipe
    properties:
      created_at:
        type: string
      id:
        type: string
      original_prompt:
        type: string
      suggestions:
        items:
          $ref: '#/definitions/models.RecipeSuggestion'
        type: array
      updated_at:
        type: string
    required:
    - created_at
    - id
    - original_prompt
    - suggestions
    - updated_at
    type: object
  models.UnauthorizedResponse:
    description: Unauthorized error response
    properties:
      error:
        description: Error message
        example: Unauthorized
        type: string
    required:
    - error
    type: object
  models.UserRecipe:
    description: The user's personal copy (favorites, edits).
    properties:
      created_at:
        type: string
      description:
        example: A classic Italian dish
        type: string
      global_recipe_id:
        type: string
      id:
        type: string
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      is_favorite:
        type: boolean
      latest_version_id:
        type: string
      servings:
        example: 4
        type: integer
      steps:
        items:
          type: string
        type: array
      title:
        example: Veal Bolognese
        type: string
      total_time_minutes:
        example: 120
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - created_at
    - description
    - id
    - ingredients
    - is_favorite
    - latest_version_id
    - servings
    - steps
    - title
    - total_time_minutes
    - updated_at
    - user_id
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for the EatMe recipe generation service
  title: EatMe API
  version: "1.0"
paths:
  /chat/modify/recipes/{recipeId}:
    put:
      consumes:
      - application/json
      description: Handle modifying a recipe
      operationId: modifyRecipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeId
        required: true
        type: string
      - description: Modify chat request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ModifyChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModifyChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Handle modifying a recipe
      tags:
      - Chat
  /chat/question/recipes/{recipeId}:
    post:
      consumes:
      - application/json
      description: Handle general chat request
      operationId: generalChat
      parameters:
      - description: Recipe ID
        in: path
        name: recipeId
        required: true
        type: string
      - description: General chat request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GeneralChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Handle general chat request
      tags:
      - Chat
  /chat/suggest:
    post:
      consumes:
      - application/json
      description: Handle starting a recipe suggestion chat
      operationId: suggestRecipe
      parameters:
      - description: Suggest chat request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SuggestChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuggestChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Handle starting a recipe suggestion chat
      tags:
      - Chat
  /chat/suggest/{threadId}:
    get:
      consumes:
      - application/json
      description: Get suggestion thread
      operationId: getSuggestionThread
      parameters:
      - description: Thread ID
        in: path
        name: threadId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuggestionThread'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Get suggestion thread
      tags:
      - Chat
  /chat/suggest/{threadId}/accept/{suggestionId}:
    post:
      description: Handle accepting a recipe suggestion
      operationId: acceptRecipeSuggestion
      parameters:
      - description: Thread ID
        in: path
        name: threadId
        required: true
        type: string
      - description: Suggestion ID
        in: path
        name: suggestionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRecipe'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Handle accepting a recipe suggestion
      tags:
      - Chat
  /chat/suggest/{threadId}/next:
    post:
      consumes:
      - application/json
      description: Handle getting next recipe suggestion
      operationId: nextRecipeSuggestion
      parameters:
      - description: Thread ID
        in: path
        name: threadId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RecipeSuggestion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Handle getting next recipe suggestion
      tags:
      - Chat
  /profile:
    get:
      description: Gets the profile for a user
      operationId: getProfile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Save a user's profile
      operationId: saveProfile
      parameters:
      - description: User profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.ProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Save user profile
      tags:
      - users
  /recipes:
    get:
      consumes:
      - application/json
      description: Get all recipes for user
      operationId: getAllRecipes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserRecipe'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Get all recipes for user
      tags:
      - Recipe
  /recipes/{recipe_id}:
    get:
      consumes:
      - application/json
      description: Get recipe by ID
      operationId: getRecipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRecipe'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Get recipe by ID
      tags:
      - Recipe
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user account
      operationId: signup
      parameters:
      - description: User signup information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SignupResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Create a new user account
      tags:
      - users
swagger: "2.0"
